q
cont
file_data
cont
f1 = ActionDispatch::Http::UploadedFile.new
ff.original_filename
fff.original_filename
fff.content_type
fff
ff.content_type
file_data.content_type
file_data.original_filename
file_data.filename
file_data.original_filename
file_data.class
file_data.classs
file_data.size
ff.size
ff = ActionDispatch::Http::UploadedFile.new
fff.class
fff = ActionDispatch::Http::UploadedFile
ff.class
ff = ActionDispatch::Http::UploadedFile.new
ff = ActionDispatch::Http::UploadedFile
file_data.class
file_data
cont
filen = ff.read
ff
ff.filename = "charts.csv"
ff = transfering_params[:args].open
ff = transfering_params[:args].new
transfering_params[:args]
q
file_data.class
file_data
cont
Datesetting.where(:id => oldid).destroy_all
Chart.where(:id => oldid).destroy_all
Chart.delete_all.where('id = ?',10)
Chart.delete_all.where('id = ?',oldid)
Chart.delete.where("id = ?",oldid)
Chart.delete_all.where("id = ?",oldid)
@user.destroy
oldid = @user.id
oldid
@user
cont
@user
cont
@_response_body
@user
@_params
@_response_body
cont
@_env
@_status
@_routes
@_response_body
@_config
@_params
instance_variables
@users
@user
@_controller
cont
@user
@users
cont
@users
@user
@user = User.find(14)
@user = User.find(7)
params[:id]
@user
@users
cont
@users
@user
cont
@user
@users
cont
application_controller.instance_variable_names
Users_controller.instance_variable_names
Exp_imps_controller.instance_variable_names
@chart
@exp_imp
@users
@user
cont
i.to_i
cont
i.to_i
cont
i.to_i
cont
ssk[1][1].from(4)
ssk[1][1]
ssk[1][0]
cont
ssk[1][0]
ssk[1][1]
cont
ssk[1][1]
ssk[1][0]
ssk[1]
ssk[0]
ssk
rr
rrc
i.to_i
cont
ssk[8]
cont
q
ssk[8]
i.to_i
"i"
i
cont
ssk[8]
ssk[0]
cont
q
rrc
ssk[0]
ssk[0][6].from(4)
cont
ssk[0][6].from(4)
ssk[0][6]
ssk[0]
cont
rr
ssk[0][6]
q
ssk[0][6]
rr
ssk[0][6].to_f
ssk[0][6]
ssk[0][5]
ssk[0][4]
ssk[0][3]
ssk[0][2]
ssk[0][1]
ssk[0][0]
rr[0]
rrc
cont
ssk
rr
rr[8]
rr.count
q
rr.count
rr[8]
rr[7]
rr[6]
rr[5]
rr[4]
rr[3]
rr[2]
rr[1]
rr[0]
ssk[0]
q
ssk[10].count
ssk[0].count
ssk.count
ggm.count
rr.count
ssk[2][5]
ssk[2][0]
ssk[2][1]
ssk[2][2]
ggm[1][1]
ggm[1]
 ggm[1,0]
 ggm[1] = rr[1].split(',')
ggm = Array.new
 ggm[1] = rr[1].split(',')
ggg[0]
rr[1]
 ggg = rr[1].split(',')
rr[1]
rr[0]
ssk[1]
ssk[0,1]
ssk[0,0]
ssk[0]
q
ssk
cont
q
ssk[0]
ssk[5]
ssk = rr[0].split(',')
rr = filen.split(/\r?\n/)
filen = file_contents
file_contents = file_data.read
file_data = transfering_params[:args]
cont
_amt
ssk[5]
_amt
cont
!rr[59].nil?
!rr[60].nil?
!rr[68].nil?
!rr[58].nil?
!rr[57].nil?
!rr[100].nil?
!rr[0].nil?
i
!rr[i].nil?
i
ssk
cont
q
rr[218]
rr[18]
rr[1]
rr[0]
rr = filen.split(/\r?\n/)
rr = filen.split(\n)
ssk[7]
ssk[6]
ssk[5]
ssk[1]
ssk[0]
ssk = filen.split(',')
rr[0]
rr[1]
rr = filen.split('\n')
filen.inspect
file_contents.class
filen.class
filen.readln
filen
rr = row.inspect
CSV.foreach(filen) do |row|
system "transfering", filen
filen = file_contents
file_contents = file_data.read
file_data = transfering_params[:args]
 bankn = transfering_params[:argb]
cont
transfering_params[:args]
transfering_params[:argn]
transfering_params[:argb]
transfering_params
q
transfering_params
params[:transfering[argb]]
params[:transfering=>argb]
params[:transfering,:argb]
